name: Python Flask CI/CD Pipeline

on:
  push:
    branches:
      - main
      - lab3
  workflow_dispatch:

jobs:
  run_tests:
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run:
          python -m unittest devops/lab3/tests/test_app.py
  publish:
    needs: run_tests
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Doppler CLI
        run: |
          curl -Ls https://cli.doppler.com/install.sh | sudo sh

      - name: Authenticate with Doppler
        run: doppler login --token ${{ secrets.DOPPLER_TOKEN }} --no-interactive

      - name: Export secrets from Doppler
        run: doppler secrets download --format env --no-file > .env

      - name: Load secrets into environment
        run: |
          set -a
          source .env
          set +a

      - name: Login
        run: echo "${DOCKER_PWD}" | docker login -u "${DOCKER_LOGIN}" --password-stdin
      - name: Debug GitHub ref
        run: echo ${GITHUB_REF}

      - uses: actions/checkout@main
      - name: Build
        run: docker build -t $DOCKER_LOGIN/$DOCKER_NAME:${GITHUB_REF:11} -f devops/lab3/web/Dockerfile .

      - name: Push
        run: docker push $DOCKER_LOGIN/$DOCKER_NAME:${GITHUB_REF:11}
  deploy:
    needs: [ publish ]
    runs-on: ubuntu-20.04
    steps:
      - name: Set Tag
        run: echo "TAG=$(echo ${GITHUB_REF:11})" >> $GITHUB_ENV

      - name: Install Doppler CLI
        run: |
          curl -Ls https://cli.doppler.com/install.sh | sudo sh

      - name: Authenticate with Doppler
        run: doppler login --token ${{ secrets.DOPPLER_TOKEN }} --no-interactive

      - name: Export secrets from Doppler
        run: doppler secrets download --format env --no-file > .env

      - name: Load secrets into environment
        run: |
          set -a
          source .env
          set +a

      - name: Send webhook for deploy
        run: |
          curl --silent --show-error --fail -X POST $DEPLOYMENT_SERVER \
            -H 'Authorization: Bearer '"$DEPLOYMENT_TOKEN"'' \
            -H 'Content-Type: application/json' \
            -d '{
                  "owner": "'$DOCKER_LOGIN'",
                  "repository": "'$DOCKER_NAME'",
                  "tag": "'$TAG'",
                  "ports": {"5000": 5000}
                }'
