name: Python Flask CI/CD Pipeline Bad

on:
  push:
    branches:
      - main
      - lab3
  workflow_dispatch:

jobs:
  publish_and_tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - run:
          python -m unittest devops/lab3/tests/test_app.py

      - uses: hashicorp/vault-action@v2
        with:
          url: ${{ secrets.VAULT_SERVER }}
          method: userpass
          username: ${{ secrets.VAULT_LOGIN }}
          password: ${{ secrets.VAULT_PWD }}
          secrets: |
            kv/lab3-secret DOCKER_LOGIN | DOCKER_LOGIN ;
            kv/lab3-secret DOCKER_NAME | DOCKER_NAME ;
            kv/lab3-secret DOCKER_PWD | DOCKER_PWD ;
        env:
          VAULT_TOKEN: ${{ secrets.VAULT_TOKEN }}

      - run: echo $DOCKER_PWD | docker login -u $DOCKER_LOGIN --password-stdin
      - run: echo ${GITHUB_REF}

      - uses: actions/checkout@main
      - run: docker build -t $DOCKER_LOGIN/$DOCKER_NAME:${GITHUB_REF:11} -f devops/lab3/web/Dockerfile .

      - run: docker push $DOCKER_LOGIN/$DOCKER_NAME:${GITHUB_REF:11}
  deploy:
    needs: publish_and_tests
    runs-on: ubuntu-latest
    steps:
      - uses: hashicorp/vault-action@v2
        with:
          url: ${{ secrets.VAULT_SERVER }}
          method: userpass
          username: ${{ secrets.VAULT_LOGIN }}
          password: ${{ secrets.VAULT_PWD }}
          secrets: |
            kv/lab3-secret DEPLOYMENT_SERVER | DEPLOYMENT_SERVER ;
            kv/lab3-secret DEPLOYMENT_TOKEN | DEPLOYMENT_TOKEN ;
        env:
          VAULT_TOKEN: ${{ secrets.VAULT_TOKEN }}


      - run: echo "TAG=$(echo ${GITHUB_REF:11})" >> $GITHUB_ENV

      - run: |
          curl --silent --show-error --fail -X POST "$DEPLOYMENT_SERVER" \
            -H "Authorization: $DEPLOYMENT_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{
              "owner": "'"$DOCKER_LOGIN"'",
              "repository": "'"$DOCKER_NAME"'",
              "tag": "'"${{ env.TAG }}"'",
              "ports": {"5000": 5000}
            }'
