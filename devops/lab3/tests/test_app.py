import sys
sys.path.append("devops/lab3/web")
import unittest
from devops.lab3.web.app import app


class FlaskAppTests(unittest.TestCase):
    quotes = [
        "Если ты не способен защитить тех, кого любишь, то кто будет это делать вместо тебя?",
        "Иногда самым важным шагом вперед является осознание того, что ты уже на правильном пути.",
        "Не будь рабом своей судьбы, бери её в свои руки.",
        "Сомнения — это не слабость, это сигнал, что ты думаешь о том, что делаешь.",
        "Не всё можно решить силой, но терпение и ум всегда принесут плоды.",
        "Никогда не недооценивать силу тех, кто не кричит о своих способностях.",
        "Иногда всё, что нужно для победы — это не сдаваться, несмотря на трудности.",
        "Тот, кто ищет лёгкие пути, не может быть истинным героем.",
        "Если тебе не нравится путь, по которому ты идёшь, измени его.",
        "Каждый мир полон загадок, и в каждом из них есть своя истина."
    ]

    # Метод для настройки тестового клиента
    def setUp(self):
        self.app = app.test_client()  # Создаем тестового клиента для имитации запросов
        self.app.testing = True  # Включаем режим тестирования

    # Тест на проверку доступности главной страницы
    def test_home_page_status_code(self):
        response = self.app.get('/')  # Отправляем GET-запрос на главную страницу
        self.assertEqual(response.status_code, 200)  # Проверяем, что статус код 200 (успех)

    # Тест на проверку, что цитата отображается на странице
    def test_home_page_contains_quote(self):
        response = self.app.get('/')  # Отправляем GET-запрос на главную страницу
        # Теперь передаем строки как обычные строки, а не байтовые
        self.assertIn("Показать другую цитату",
                      response.data.decode('utf-8'))  # Проверяем, что на странице есть текст "Случайная цитата"

    def test_home_page_contains_at_least_one_quote(self):
        response = self.app.get('/')  # Отправляем GET-запрос на главную страницу
        page_content = response.data.decode('utf-8')  # Декодируем байтовые данные в строку

        # Проверяем, что хотя бы одна цитата из списка присутствует на странице
        quote_found = False
        for quote in self.quotes:
            if quote in page_content:
                quote_found = True
                break  # Если хотя бы одна цитата найдена, прекращаем проверку

        self.assertTrue(quote_found, "На странице не найдена ни одна цитата!")


if __name__ == '__main__':
    unittest.main()
